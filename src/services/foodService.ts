import { OpenFoodFactsResponse, Product } from '../types';
import { analyzeIngredientsWithGemini, translateIngredients } from './geminiService';

const API_BASE_URL = 'https://world.openfoodfacts.org/api/v0/product';

// Ingredientes com√∫nmente no vegetarianos/veganos para an√°lisis b√°sico
const NON_VEGETARIAN_INGREDIENTS = [
  'carne', 'pollo', 'cerdo', 'pescado', 'mariscos', 'gelatina', 'cochinilla',
  'meat', 'chicken', 'pork', 'fish', 'seafood', 'gelatin', 'carmine',
  'beef', 'turkey', 'lamb', 'bacon', 'ham', 'anchovies', 'tuna',
  'ternera', 'cordero', 'jam√≥n', 'anchoas', 'at√∫n', 'bacalao'
];

const NON_VEGAN_INGREDIENTS = [
  ...NON_VEGETARIAN_INGREDIENTS,
  'leche', 'queso', 'mantequilla', 'huevo', 'miel', 'lactosa', 'case√≠na',
  'milk', 'cheese', 'butter', 'egg', 'honey', 'lactose', 'casein',
  'whey', 'cream', 'yogurt', 'suero', 'nata', 'yogur', 'reques√≥n'
];

/**
 * AN√ÅLISIS B√ÅSICO
 */
function basicIngredientAnalysis(ingredientsText: string): { 
  classification: 'vegan' | 'vegetarian' | 'omnivore' | 'unknown', 
  confidence: number 
} {
  if (!ingredientsText) {
    return { classification: 'unknown', confidence: 0 };
  }

  const lowerIngredients = ingredientsText.toLowerCase();
  
  // Buscar ingredientes no vegetarianos
  const hasNonVegetarian = NON_VEGETARIAN_INGREDIENTS.some(ingredient => 
    lowerIngredients.includes(ingredient)
  );
  
  if (hasNonVegetarian) {
    return { classification: 'omnivore', confidence: 90 };
  }
  
  // Buscar ingredientes no veganos
  const hasNonVegan = NON_VEGAN_INGREDIENTS.some(ingredient => 
    lowerIngredients.includes(ingredient)
  );
  
  if (hasNonVegan) {
    return { classification: 'vegetarian', confidence: 85 };
  }
  
  return { classification: 'vegan', confidence: 70 };
}

/**
 * AN√ÅLISIS CONSERVADOR DE OPENFOODFACTS
 */
function analyzeOpenFoodFactsData(product: any): {
  classification: 'vegan' | 'vegetarian' | 'omnivore' | 'unknown';
  confidence: number;
  source: 'openfoodfacts' | 'none';
} {
  console.log('\nüîç ===== AN√ÅLISIS OPENFOODFACTS CONSERVADOR =====');
  console.log('üì¶ Producto:', product.product_name, '(', product.code, ')');
  
  // ==========================================
  // M√âTODO 1: INGREDIENTS_ANALYSIS_TAGS (PRIORITARIO)
  // ==========================================
  if (Array.isArray(product.ingredients_analysis_tags)) {
    console.log('\nüè∑Ô∏è AN√ÅLISIS DE INGREDIENTS_ANALYSIS_TAGS:');
    console.log('üìã Tags encontrados:', product.ingredients_analysis_tags);
    
    const tags = product.ingredients_analysis_tags;
    
    // Buscar tags espec√≠ficos
    const hasVeganTag = tags.includes('en:vegan');
    const hasVegetarianTag = tags.includes('en:vegetarian');
    const hasNonVeganTag = tags.includes('en:non-vegan');
    const hasNonVegetarianTag = tags.includes('en:non-vegetarian');
    
    console.log('üîç An√°lisis de tags:');
    console.log('  - en:vegan:', hasVeganTag);
    console.log('  - en:vegetarian:', hasVegetarianTag);
    console.log('  - en:non-vegan:', hasNonVeganTag);
    console.log('  - en:non-vegetarian:', hasNonVegetarianTag);
    
    // ==========================================
    // L√ìGICA CONSERVADORA - SOLO CLASIFICAR SI ESTAMOS SEGUROS
    // ==========================================
    
    // 1. M√ÅXIMA PRIORIDAD: ¬øContiene carne/pescado? ‚Üí OMN√çVORO
    if (hasNonVegetarianTag) {
      console.log('ü•© RESULTADO TAGS: OMN√çVORO (en:non-vegetarian - contiene carne/pescado)');
      return { classification: 'omnivore', confidence: 100, source: 'openfoodfacts' };
    }
    
    // 2. SEGUNDA PRIORIDAD: ¬øEs expl√≠citamente vegano? ‚Üí VEGANO
    if (hasVeganTag) {
      console.log('üå± RESULTADO TAGS: VEGANO (en:vegan)');
      return { classification: 'vegan', confidence: 100, source: 'openfoodfacts' };
    }
    
    // 3. TERCERA PRIORIDAD: ¬øEs expl√≠citamente vegetariano Y sabemos que no es vegano? ‚Üí VEGETARIANO
    if (hasVegetarianTag && hasNonVeganTag) {
      console.log('ü•õ RESULTADO TAGS: VEGETARIANO (en:vegetarian + en:non-vegan - confirmado)');
      return { classification: 'vegetarian', confidence: 100, source: 'openfoodfacts' };
    }
    
    // 4. CUARTA PRIORIDAD: ¬øEs solo vegetariano sin informaci√≥n contradictoria? ‚Üí VEGETARIANO
    if (hasVegetarianTag && !hasNonVeganTag && !hasVeganTag) {
      console.log('ü•õ RESULTADO TAGS: VEGETARIANO (en:vegetarian sin contradicciones)');
      return { classification: 'vegetarian', confidence: 100, source: 'openfoodfacts' };
    }
    
    // ==========================================
    // CAMBIO CR√çTICO: SER M√ÅS CONSERVADOR
    // ==========================================
    
    // 5. NUEVA REGLA: Si solo sabemos que NO es vegano, pero NO sabemos si es vegetariano ‚Üí DESCONOCIDO
    // Esto cubre casos como el helado donde OpenFoodFacts dice "No vegano" pero "Se desconoce si es vegetariano"
    if (hasNonVeganTag && !hasVegetarianTag && !hasNonVegetarianTag) {
      console.log('‚ùì RESULTADO TAGS: DESCONOCIDO (en:non-vegan pero sin confirmaci√≥n vegetariana)');
      console.log('   ‚Üí OpenFoodFacts no est√° seguro si es vegetariano, delegando a IA');
      return { classification: 'unknown', confidence: 0, source: 'none' };
    }
    
    // Si hay tags pero ninguno es concluyente
    if (tags.length > 0) {
      console.log('‚ö†Ô∏è Hay tags pero ninguno permite clasificaci√≥n definitiva');
      console.log('   ‚Üí Delegando a an√°lisis de IA para mayor precisi√≥n');
      return { classification: 'unknown', confidence: 0, source: 'none' };
    }
  }
  
  // ==========================================
  // M√âTODO 2: CAMPOS DIRECTOS
  // ==========================================
  const directVegetarian = product.vegetarian;
  const directVegan = product.vegan;
  
  console.log('\nüîç Campos directos:');
  console.log('  - vegetarian:', directVegetarian);
  console.log('  - vegan:', directVegan);
  
  if (directVegan === '1' || directVegan === 'yes' || directVegan === 1) {
    console.log('üå± RESULTADO CAMPOS: VEGANO (campo directo vegan=yes)');
    return { classification: 'vegan', confidence: 100, source: 'openfoodfacts' };
  }
  
  if (directVegetarian === '1' || directVegetarian === 'yes' || directVegetarian === 1) {
    if (directVegan === '0' || directVegan === 'no' || directVegan === 0) {
      console.log('ü•õ RESULTADO CAMPOS: VEGETARIANO (vegetarian=yes, vegan=no)');
      return { classification: 'vegetarian', confidence: 100, source: 'openfoodfacts' };
    } else {
      console.log('ü•õ RESULTADO CAMPOS: VEGETARIANO (vegetarian=yes, sin info vegana)');
      return { classification: 'vegetarian', confidence: 100, source: 'openfoodfacts' };
    }
  }
  
  if (directVegetarian === '0' || directVegetarian === 'no' || directVegetarian === 0) {
    console.log('ü•© RESULTADO CAMPOS: OMN√çVORO (vegetarian=no)');
    return { classification: 'omnivore', confidence: 100, source: 'openfoodfacts' };
  }
  
  // ==========================================
  // M√âTODO 3: INGREDIENTS_ANALYSIS (FALLBACK)
  // ==========================================
  if (product.ingredients_analysis && typeof product.ingredients_analysis === 'object') {
    console.log('\nüìä AN√ÅLISIS DE INGREDIENTS_ANALYSIS:');
    const analysis = product.ingredients_analysis;
    
    const vegan = Array.isArray(analysis['en:vegan']) ? analysis['en:vegan'] : [];
    const vegetarian = Array.isArray(analysis['en:vegetarian']) ? analysis['en:vegetarian'] : [];
    const nonVegan = Array.isArray(analysis['en:non-vegan']) ? analysis['en:non-vegan'] : [];
    const nonVegetarian = Array.isArray(analysis['en:non-vegetarian']) ? analysis['en:non-vegetarian'] : [];

    console.log('  - en:vegan:', vegan);
    console.log('  - en:vegetarian:', vegetarian);
    console.log('  - en:non-vegan:', nonVegan);
    console.log('  - en:non-vegetarian:', nonVegetarian);

    // Aplicar la misma l√≥gica conservadora
    if (nonVegetarian.includes('yes')) {
      console.log('ü•© RESULTADO ANALYSIS: OMN√çVORO (en:non-vegetarian=yes)');
      return { classification: 'omnivore', confidence: 100, source: 'openfoodfacts' };
    }

    if (vegan.includes('yes')) {
      console.log('üå± RESULTADO ANALYSIS: VEGANO (en:vegan=yes)');
      return { classification: 'vegan', confidence: 100, source: 'openfoodfacts' };
    }

    if (vegetarian.includes('yes') && nonVegan.includes('yes')) {
      console.log('ü•õ RESULTADO ANALYSIS: VEGETARIANO (en:vegetarian=yes + en:non-vegan=yes)');
      return { classification: 'vegetarian', confidence: 100, source: 'openfoodfacts' };
    }

    if (vegetarian.includes('yes') && vegan.length === 0 && nonVegan.length === 0) {
      console.log('ü•õ RESULTADO ANALYSIS: VEGETARIANO (en:vegetarian=yes, sin contradicciones)');
      return { classification: 'vegetarian', confidence: 100, source: 'openfoodfacts' };
    }

    // NUEVA REGLA CONSERVADORA: Si solo sabemos que NO es vegano ‚Üí DESCONOCIDO
    if (nonVegan.includes('yes') && vegetarian.length === 0 && !nonVegetarian.includes('yes')) {
      console.log('‚ùì RESULTADO ANALYSIS: DESCONOCIDO (en:non-vegan=yes pero sin confirmaci√≥n vegetariana)');
      return { classification: 'unknown', confidence: 0, source: 'none' };
    }

    if (vegetarian.includes('no')) {
      console.log('ü•© RESULTADO ANALYSIS: OMN√çVORO (en:vegetarian=no)');
      return { classification: 'omnivore', confidence: 100, source: 'openfoodfacts' };
    }

    if (vegan.includes('no') && !vegetarian.includes('no') && !nonVegetarian.includes('yes')) {
      // Solo si tenemos confirmaci√≥n positiva de que es vegetariano
      if (vegetarian.includes('yes')) {
        console.log('ü•õ RESULTADO ANALYSIS: VEGETARIANO (en:vegan=no + en:vegetarian=yes)');
        return { classification: 'vegetarian', confidence: 100, source: 'openfoodfacts' };
      } else {
        console.log('‚ùì RESULTADO ANALYSIS: DESCONOCIDO (en:vegan=no pero sin confirmaci√≥n vegetariana)');
        return { classification: 'unknown', confidence: 0, source: 'none' };
      }
    }
  }

  console.log('\n‚ùå NO HAY DATOS CONCLUYENTES EN OPENFOODFACTS');
  return { classification: 'unknown', confidence: 0, source: 'none' };
}

/**
 * Detecta si los ingredientes necesitan traducci√≥n - MEJORADO Y M√ÅS AGRESIVO
 */
function needsTranslation(ingredients: string): boolean {
  if (!ingredients || ingredients.trim().length === 0) {
    return false;
  }

  // Lista muy ampliada de palabras comunes en ingl√©s en ingredientes
  const englishWords = [
    // B√°sicos
    'water', 'sugar', 'flour', 'milk', 'egg', 'butter', 'oil', 'salt', 
    'wheat', 'corn', 'soy', 'contains', 'may contain', 'ingredients',
    
    // Sabores y aditivos
    'natural flavor', 'artificial flavor', 'preservative', 'emulsifier',
    'stabilizer', 'antioxidant', 'color', 'colour', 'vitamin', 'mineral',
    
    // Espec√≠ficos de l√°cteos y procesados
    'rehydrated', 'skimmed', 'lactose-free', 'vanilla', 'essence', 'inulin',
    'prebiotic', 'natural', 'fibre', 'fiber', 'maltodextrin', 'sweeteners',
    'free', 'powder', 'extract', 'concentrate', 'modified', 'starch',
    
    // Nuevas palabras detectadas
    'and', 'or', 'with', 'from', 'added', 'less', 'than', 'more',
    'organic', 'natural', 'artificial', 'synthetic', 'derived',
    'citric', 'acid', 'sodium', 'potassium', 'calcium', 'magnesium',
    'mono', 'di', 'tri', 'glycerides', 'lecithin', 'carrageenan',
    'guar', 'gum', 'xanthan', 'pectin', 'agar', 'gellan',
    'ascorbic', 'tocopherol', 'beta', 'carotene', 'riboflavin',
    'thiamine', 'niacin', 'folate', 'biotin', 'pantothenic',
    'pyridoxine', 'cobalamin', 'cholecalciferol', 'phylloquinone'
  ];
  
  const lowerIngredients = ingredients.toLowerCase();
  const englishWordsFound = englishWords.filter(word => lowerIngredients.includes(word)).length;
  
  // Ser MUY agresivo con la detecci√≥n - solo 1 palabra es suficiente
  console.log(`üåç Detecci√≥n de idioma: ${englishWordsFound} palabras en ingl√©s encontradas`);
  console.log(`üìù Muestra de ingredientes: "${ingredients.substring(0, 100)}..."`);
  
  // Si encuentra al menos 1 palabra en ingl√©s, traducir
  const shouldTranslate = englishWordsFound >= 1;
  console.log(`üîÑ ¬øNecesita traducci√≥n? ${shouldTranslate ? 'S√ç' : 'NO'}`);
  
  return shouldTranslate;
}

/**
 * Validar c√≥digo de barras antes de hacer la petici√≥n
 */
function validateBarcodeFormat(barcode: string): { isValid: boolean; error?: string } {
  const trimmedCode = barcode.trim();
  
  if (!trimmedCode) {
    return { isValid: false, error: 'C√≥digo de barras vac√≠o' };
  }
  
  if (trimmedCode.length < 8 || trimmedCode.length > 14) {
    return { isValid: false, error: 'El c√≥digo debe tener entre 8 y 14 d√≠gitos' };
  }
  
  if (!/^\d+$/.test(trimmedCode)) {
    return { isValid: false, error: 'El c√≥digo solo puede contener n√∫meros' };
  }
  
  const suspiciousPatterns = [
    'http', 'https', 'www', '.com', '.js', 'error', 'failed', 'cannot',
    'localservice', 'webcontainer', 'TypeError', 'navigate', 'console',
    'react-dom', 'lucid', 'sentry', 'download'
  ];
  
  const lowerCode = trimmedCode.toLowerCase();
  for (const pattern of suspiciousPatterns) {
    if (lowerCode.includes(pattern)) {
      return { isValid: false, error: 'Formato de c√≥digo inv√°lido detectado' };
    }
  }
  
  return { isValid: true };
}

/**
 * FUNCI√ìN PRINCIPAL DE AN√ÅLISIS
 */
export async function fetchProductByBarcode(barcode: string): Promise<Product | null> {
  try {
    console.log('\nüöÄ ===== INICIANDO B√öSQUEDA =====');
    console.log('üîç C√≥digo de barras recibido:', barcode);
    
    const validation = validateBarcodeFormat(barcode);
    if (!validation.isValid) {
      console.error('‚ùå C√≥digo de barras inv√°lido:', validation.error);
      throw new Error(`C√≥digo de barras inv√°lido: ${validation.error}`);
    }
    
    const cleanBarcode = barcode.trim();
    console.log('‚úÖ C√≥digo validado:', cleanBarcode);
    
    const response = await fetch(`${API_BASE_URL}/${cleanBarcode}.json`);
    
    if (!response.ok) {
      throw new Error(`Error HTTP ${response.status}: ${response.statusText}`);
    }
    
    const data: OpenFoodFactsResponse = await response.json();
    
    if (data.status !== 1 || !data.product) {
      console.log('‚ùå Producto no encontrado en OpenFoodFacts');
      return null;
    }
    
    const product = data.product;
    let ingredientsText = product.ingredients_text_es || product.ingredients_text || '';
    
    console.log('‚úÖ Producto encontrado:', product.product_name);
    console.log('üìù Ingredientes originales:', ingredientsText.substring(0, 100) + '...');
    
    // Variables para el resultado final
    let classification: 'vegan' | 'vegetarian' | 'omnivore' | 'unknown' = 'unknown';
    let confidence = 0;
    let analysisSource: 'openfoodfacts' | 'gemini' | 'basic' = 'basic';
    let aiReasoning = '';
    let confidenceExplanation = '';

    // ==========================================
    // PASO 1: OPENFOODFACTS (PRIORIDAD ABSOLUTA)
    // ==========================================
    const openFoodFactsResult = analyzeOpenFoodFactsData(product);
    
    if (openFoodFactsResult.source === 'openfoodfacts') {
      // ‚úÖ USAR OPENFOODFACTS - RESULTADO FINAL
      classification = openFoodFactsResult.classification;
      confidence = openFoodFactsResult.confidence;
      analysisSource = 'openfoodfacts';
      confidenceExplanation = '';
      
      console.log(`\nüéâ RESULTADO FINAL OPENFOODFACTS: ${classification.toUpperCase()} (${confidence}%)`);
      
      // TRADUCIR INGREDIENTES SIEMPRE QUE SEA NECESARIO
      if (ingredientsText.trim() && needsTranslation(ingredientsText)) {
        try {
          console.log('üåç Traduciendo ingredientes para mostrar (resultado OpenFoodFacts)...');
          const translatedIngredients = await translateIngredients(ingredientsText);
          if (translatedIngredients && translatedIngredients !== ingredientsText) {
            console.log('‚úÖ Ingredientes traducidos exitosamente');
            console.log('üìù Antes:', ingredientsText.substring(0, 50) + '...');
            console.log('üìù Despu√©s:', translatedIngredients.substring(0, 50) + '...');
            ingredientsText = translatedIngredients;
          } else {
            console.log('‚ö†Ô∏è La traducci√≥n no cambi√≥ el texto o fall√≥ silenciosamente');
          }
        } catch (error) {
          console.error('‚ùå Error al traducir ingredientes:', error);
          console.log('‚ö†Ô∏è Usando ingredientes originales sin traducir');
        }
      } else {
        console.log('‚ÑπÔ∏è Los ingredientes no necesitan traducci√≥n o est√°n vac√≠os');
      }
    } else {
      // ==========================================
      // OPENFOODFACTS NO TIENE DATOS √öTILES O ES AMBIGUO
      // ==========================================
      console.log('\n‚ùå OpenFoodFacts no tiene datos concluyentes - Delegando a IA');
      
      // ==========================================
      // PASO 2: AN√ÅLISIS CON IA
      // ==========================================
      if (ingredientsText.trim()) {
        console.log('\nü§ñ ===== AN√ÅLISIS CON IA =====');
        
        try {
          let ingredientsForAI = ingredientsText;
          if (needsTranslation(ingredientsText)) {
            console.log('üåç Traduciendo ingredientes antes del an√°lisis de IA...');
            try {
              const translatedIngredients = await translateIngredients(ingredientsText);
              if (translatedIngredients && translatedIngredients !== ingredientsText) {
                console.log('‚úÖ Ingredientes traducidos para IA');
                console.log('üìù Original:', ingredientsText.substring(0, 50) + '...');
                console.log('üìù Traducido:', translatedIngredients.substring(0, 50) + '...');
                ingredientsForAI = translatedIngredients;
                ingredientsText = translatedIngredients;
              } else {
                console.log('‚ö†Ô∏è La traducci√≥n no cambi√≥ el texto, usando original');
              }
            } catch (translationError) {
              console.error('‚ùå Error en traducci√≥n, usando ingredientes originales:', translationError);
            }
          }
          
          console.log('üß† Enviando a an√°lisis de IA...');
          const geminiAnalysis = await analyzeIngredientsWithGemini(ingredientsForAI);
          
          if (geminiAnalysis.classification !== 'unknown') {
            classification = geminiAnalysis.classification;
            confidence = geminiAnalysis.confidence;
            analysisSource = 'gemini';
            aiReasoning = geminiAnalysis.reasoning;
            confidenceExplanation = geminiAnalysis.confidenceExplanation || '';
            console.log(`‚úÖ RESULTADO IA: ${classification.toUpperCase()} (${confidence}%)`);
          } else {
            throw new Error('IA no pudo determinar clasificaci√≥n');
          }
        } catch (error) {
          console.error('‚ùå Error en an√°lisis de IA:', error);
          
          // ==========================================
          // PASO 3: AN√ÅLISIS B√ÅSICO (√öLTIMO RECURSO)
          // ==========================================
          console.log('\nüîß Usando an√°lisis b√°sico como √∫ltimo recurso...');
          
          // Intentar traducir ingredientes para an√°lisis b√°sico tambi√©n
          if (ingredientsText.trim() && needsTranslation(ingredientsText)) {
            try {
              console.log('üåç Traduciendo ingredientes para an√°lisis b√°sico...');
              const translatedIngredients = await translateIngredients(ingredientsText);
              if (translatedIngredients && translatedIngredients !== ingredientsText) {
                console.log('‚úÖ Ingredientes traducidos para an√°lisis b√°sico');
                ingredientsText = translatedIngredients;
              }
            } catch (error) {
              console.error('‚ùå Error al traducir ingredientes para an√°lisis b√°sico:', error);
            }
          }
          
          const basicAnalysis = basicIngredientAnalysis(ingredientsText);
          classification = basicAnalysis.classification;
          confidence = basicAnalysis.confidence;
          analysisSource = 'basic';
          confidenceExplanation = 'OpenFoodFacts no tiene informaci√≥n suficiente y el an√°lisis de IA fall√≥. Usando an√°lisis b√°sico de ingredientes conocidos.';
          console.log(`‚úÖ RESULTADO B√ÅSICO: ${classification.toUpperCase()} (${confidence}%)`);
        }
      } else {
        console.log('üìù Sin ingredientes disponibles para an√°lisis');
        classification = 'unknown';
        confidence = 0;
        analysisSource = 'basic';
        confidenceExplanation = 'No hay ingredientes disponibles para analizar y OpenFoodFacts no tiene informaci√≥n suficiente.';
      }
    }
    
    console.log(`\nüèÅ RESULTADO FINAL: ${classification.toUpperCase()} (${confidence}% confianza) - Fuente: ${analysisSource.toUpperCase()}`);
    console.log('üìù Ingredientes finales:', ingredientsText.substring(0, 100) + '...');
    console.log('===== FIN AN√ÅLISIS =====\n');
    
    return {
      id: product._id,
      code: product.code,
      product_name: product.product_name || 'Producto sin nombre',
      brands: product.brands || '',
      categories: product.categories || '',
      ingredients_text: ingredientsText,
      allergens: product.allergens || '',
      nutrition_grades: product.nutrition_grades || '',
      image_url: product.image_url || '',
      image_front_url: product.image_front_url || '',
      vegetarian: classification === 'vegetarian' || classification === 'vegan',
      vegan: classification === 'vegan',
      classification,
      confidence,
      analysisSource,
      aiReasoning,
      confidenceExplanation,
      scanned_at: new Date().toISOString()
    };
  } catch (error) {
    console.error('‚ùå Error fetching product:', error);
    
    if (error instanceof Error) {
      if (error.message.includes('Failed to fetch')) {
        throw new Error('Error de conexi√≥n. Verifica tu conexi√≥n a internet e intenta de nuevo.');
      } else if (error.message.includes('C√≥digo de barras inv√°lido')) {
        throw error;
      } else if (error.message.includes('HTTP')) {
        throw new Error('Error del servidor. El servicio podr√≠a estar temporalmente no disponible.');
      } else {
        throw new Error(`Error al buscar el producto: ${error.message}`);
      }
    } else {
      throw new Error('Error desconocido al buscar el producto. Intenta de nuevo.');
    }
  }
}